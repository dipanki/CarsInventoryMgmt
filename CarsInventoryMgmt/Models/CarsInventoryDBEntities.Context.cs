//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarsInventoryMgmt.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CarsInventoryMgmtEntities : DbContext
    {
        public CarsInventoryMgmtEntities()
            : base("name=CarsInventoryMgmtEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CarDetail> CarDetails { get; set; }
    
        public virtual ObjectResult<sp_Get_Car_Details_By_User_Id_Result> sp_Get_Car_Details_By_User_Id(Nullable<int> user_Id, Nullable<int> limit, string searchString, Nullable<int> take)
        {
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("Take", take) :
                new ObjectParameter("Take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Car_Details_By_User_Id_Result>("sp_Get_Car_Details_By_User_Id", user_IdParameter, limitParameter, searchStringParameter, takeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Insert_Car_Details(Nullable<int> user_Id, string brand, string model, Nullable<int> year, Nullable<decimal> price, Nullable<bool> @new)
        {
            var user_IdParameter = user_Id.HasValue ?
                new ObjectParameter("User_Id", user_Id) :
                new ObjectParameter("User_Id", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var newParameter = @new.HasValue ?
                new ObjectParameter("New", @new) :
                new ObjectParameter("New", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Insert_Car_Details", user_IdParameter, brandParameter, modelParameter, yearParameter, priceParameter, newParameter);
        }
    
        public virtual ObjectResult<sp_Update_Car_Details_Result> sp_Update_Car_Details(Nullable<int> car_Id, string brand, string model, Nullable<int> year, Nullable<decimal> price, Nullable<bool> @new)
        {
            var car_IdParameter = car_Id.HasValue ?
                new ObjectParameter("Car_Id", car_Id) :
                new ObjectParameter("Car_Id", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var newParameter = @new.HasValue ?
                new ObjectParameter("New", @new) :
                new ObjectParameter("New", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Update_Car_Details_Result>("sp_Update_Car_Details", car_IdParameter, brandParameter, modelParameter, yearParameter, priceParameter, newParameter);
        }
    }
}
